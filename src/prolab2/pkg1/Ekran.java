package prolab2.pkg1;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Ekran extends javax.swing.JFrame {

    public static String[] iller = new String[81];// İlleri tutan dizi.
    public int cityN;// Girilecek il sayısı.

    public Ekran() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        sonuc1 = new javax.swing.JTextField();
        sonuc6 = new javax.swing.JTextField();
        sonuc2 = new javax.swing.JTextField();
        sonuc3 = new javax.swing.JTextField();
        sonuc4 = new javax.swing.JTextField();
        sonuc5 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sonuc7 = new javax.swing.JTextField();
        sonuc8 = new javax.swing.JTextField();
        sonuc9 = new javax.swing.JTextField();
        sonuc10 = new javax.swing.JTextField();
        sonuc11 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gezgin Kargo Programı");

        jButton1.setText("Ekle");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Kalan il sayısı: ");

        jButton2.setText("Bitir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        sonuc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonuc1ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton3.setText("Tamam");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Kaç şehir gireceksiniz?");

        jButton4.setText("Pogramı Sonlandır");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sonuc11)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sonuc1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sonuc2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sonuc7, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonuc8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sonuc9, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonuc10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                            .addComponent(jTextField3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton3)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sonuc3, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sonuc4, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sonuc5, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sonuc6, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(194, 194, 194))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sonuc1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sonuc2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sonuc3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sonuc4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sonuc5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sonuc6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sonuc7)
                    .addComponent(sonuc8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sonuc9)
                    .addComponent(sonuc10, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sonuc11, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    int i = 0;
    public int[] secilenIller = new int[11];
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*
            İller dizisine plaka sırasına göre iller atandı.
        */
        iller[0] = "Adana";
        iller[1] = "Adıyaman";
        iller[2] = "Afyonkarahisar";
        iller[3] = "Ağrı";
        iller[4] = "Amasya";
        iller[5] = "Ankara";
        iller[6] = "Antalya";
        iller[7] = "Artvin";
        iller[8] = "Aydın";
        iller[9] = "Balıkesir";
        iller[10] = "Bilecik";
        iller[11] = "Bingöl";
        iller[12] = "Bitlis";
        iller[13] = "Bolu";
        iller[14] = "Burdur";
        iller[15] = "Bursa";
        iller[16] = "Çanakkale";
        iller[17] = "Çankırı";
        iller[18] = "Çorum";
        iller[19] = "Denizli";
        iller[20] = "Diyarbakır";
        iller[21] = "Edirne";
        iller[22] = "Elazığ";
        iller[23] = "Erzincan";
        iller[24] = "Erzurum";
        iller[25] = "Eskişehir";
        iller[26] = "Gaziantep";
        iller[27] = "Giresun";
        iller[28] = "Gümüşhane";
        iller[29] = "Hakkari";
        iller[30] = "Hatay";
        iller[31] = "Isparta";
        iller[32] = "Mersin";
        iller[33] = "İstanbul";
        iller[34] = "İzmir";
        iller[35] = "Kars";
        iller[36] = "Kastamonu";
        iller[37] = "Kayseri";
        iller[38] = "Kırklareli";
        iller[39] = "Kırşehir";
        iller[40] = "Kocaeli";
        iller[41] = "Konya";
        iller[42] = "Kütahya";
        iller[43] = "Malatya";
        iller[44] = "Manisa";
        iller[45] = "Kahramanmaraş";
        iller[46] = "Mardin";
        iller[47] = "Muğla";
        iller[48] = "Muş";
        iller[49] = "Nevşehir";
        iller[50] = "Niğde";
        iller[51] = "Ordu";
        iller[52] = "Rize";
        iller[53] = "Sakarya";
        iller[54] = "Samsun";
        iller[55] = "Siirt";
        iller[56] = "Sinop";
        iller[57] = "Sivas";
        iller[58] = "Tekirdağ";
        iller[59] = "Tokat";
        iller[60] = "Trabzon";
        iller[61] = "Tunceli";
        iller[62] = "Şanlıurfa";
        iller[63] = "Uşak";
        iller[64] = "Van";
        iller[65] = "Yozgat";
        iller[66] = "Zonguldak";
        iller[67] = "Aksaray";
        iller[68] = "Bayburt";
        iller[69] = "Karaman";
        iller[70] = "Kırıkkale";
        iller[71] = "Batman";
        iller[72] = "Şırnak";
        iller[73] = "Bartın";
        iller[74] = "Ardahan";
        iller[75] = "Iğdır";
        iller[76] = "Yalova";
        iller[77] = "Karabük";
        iller[78] = "Kilis";
        iller[79] = "Osmaniye";
        iller[80] = "Düzce";

        boolean a = false;
        boolean b = true;
        /*
            Bu kısımda kullanıcıdan gidilecek illeri aldık.
            Olmayan bir il girdiyse hata mesajı veriliyor.
            Girilen iller için küçük-büyük harf farketmemektedir.
            Kalan il sayısı kullanıcı il girdikçe güncellenmektedir.
        */
        String deneme = jTextField1.getText();
        int j;
        for (j = 0; j < 81; j++) {
            if (deneme.equalsIgnoreCase(iller[j])) {
                a = true;
                break;
            }
        }
        for (int k = 0; k < i; k++) {
            if (secilenIller[k] == j + 1) {
                b = false;
            }
        }
        if (i < cityN && a == true && b == true) {
            secilenIller[i] = j + 1;
            jTextField1.setText("");
            jLabel1.setText("");
            jLabel2.setText("Kalan il sayısı: " + (cityN - 1 - i));
            i++;
        } else if (a == false) {
            jTextField1.setText("");
            jLabel1.setText("Hatalı giriş yaptınız!!");
        } else if (b == false) {
            jTextField1.setText("");
            jLabel1.setText("Bu il önceden girilmiş!!");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /*
            Bu kısımda daha önce hazırladığımız "komsuuzaklik.txt" adlı dosya okunur.
            Matris tanımlayıp dosyada olan bilgileri bu matrise atadık.
            Dijkstra algoritmasına uygun bir matris elde etmiş olduk.          
        */
           
        File file = new File("komsuuzaklik.txt");
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(fileReader);

        String[][] matrix = new String[81][82];

        String[] line = new String[82];
        int m = 0;
        int s = 0;

        try {
            while ((line[s] = br.readLine()) != null) {
                s++;
            }
        } catch (IOException ex) {
            Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int j = 0; j < 81; j++) {
            StringTokenizer st2 = new StringTokenizer(line[j], ",");
            while (st2.hasMoreTokens()) {
                if (m >= 1) {
                    matrix[j][m - 1] = st2.nextToken();
                }
                m++;
            }
            m = 0;
        }
        int[][] xiller = new int[82][82];

        for (int j = 0; j < 82; j++) {
            xiller[0][j] = Integer.parseInt(matrix[40][j]);
        }

        for (int a = 1; a < 82; a++) {
            for (int j = 0; j < 82; j++) {
                xiller[a][j] = Integer.parseInt(matrix[a - 1][j]);
            }
        }
       
        /*
            Oluşturduğumuz matris ve dijkstra algoritması ile en kısa yol hesaplarını yaptık.
        */
        
        ShortestPath dijkstranesne = new ShortestPath(); // Hesap yapmak için ShortestPath class'ından nesne ürettik.
        dijkstranesne.dijkstra(xiller, 0);

        int ilk[] = new int[82];
        ilk = dijkstranesne.getDist();
        int[] mesafeler = new int[cityN + 2];

        int totalYol = 0;
        int[] gidilenİlsırası = new int[cityN + 1];
        int enk, tmp, syç = 0;
        int temp;
        /*
            Aşağıdaki kod parçasında Kocaelinden başlanarak sürekli en yakın mesafe
            tercih edilerek bir sonraki adıma geçilir. Bu işlem girilen il sayısına 
            göre tekrarlanır.
        */
        while (syç < cityN) {

            enk = 0;
            tmp = ilk[secilenIller[0]];
            for (int j = 1; j < cityN - syç; j++) {
                if (ilk[secilenIller[j]] < tmp) {
                    tmp = ilk[secilenIller[j]];
                    enk = j;
                }
            }
            totalYol += ilk[secilenIller[enk]];
            mesafeler[syç] = ilk[secilenIller[enk]];
            gidilenİlsırası[syç] = secilenIller[enk];

            for (int j = 0; j < 82; j++) {
                xiller[0][j] = Integer.parseInt(matrix[(secilenIller[enk] - 1)][j]);
            }

            if (syç != cityN - 1) {
                dijkstranesne.dijkstra(xiller, 0);
                ilk = dijkstranesne.getDist();
            }
            temp = secilenIller[enk];
            secilenIller[enk] = secilenIller[cityN - 1 - syç];
            secilenIller[cityN - 1 - syç] = temp;
            //secilenIller[enk]=82;

            syç++;

        }

        for (int j = 0; j < 82; j++) {
            xiller[0][j] = Integer.parseInt(matrix[40][j]);
        }

        dijkstranesne.dijkstra(xiller, 0);
        ilk = dijkstranesne.getDist();
        totalYol += ilk[secilenIller[0]];
        mesafeler[cityN] = ilk[secilenIller[0]];
         
       /*
            Bu bölüm gidilen yolları ekrana basar. 
            Çıktı dosyasını oluşturur ve içerisine gidilen yolları yazar. 
        */
       
       File file2 = new File("cikti.txt");
        if (!file2.exists()) {
            try {
                file2.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FileWriter fileWriter = null;
        try {
            fileWriter = new FileWriter(file2, false);
        } catch (IOException ex) {
            Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedWriter bWriter = new BufferedWriter(fileWriter);

        int ss = 0;
        int yazmasayacı = 0;
        if (cityN >= 1) {
            sonuc1.setText("Kocaeli ---> " + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);

            try {
                bWriter.write("Kocaeli ---> " + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (cityN == 1) {
                sonuc2.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }

        if (cityN >= 2) {
            sonuc2.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);

            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (cityN == 2) {
                sonuc3.setText(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı]);
                try {
                    bWriter.write(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

        if (cityN >= 3) {
            sonuc3.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 3) {
                sonuc4.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        if (cityN >= 4) {
            sonuc4.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 4) {
                sonuc5.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);

                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (cityN >= 5) {
            sonuc5.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 5) {
                sonuc6.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (cityN >= 6) {
            sonuc6.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 6) {
                sonuc7.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (cityN >= 7) {
            sonuc7.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 7) {
                sonuc8.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (cityN >= 8) {
            sonuc8.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 8) {
                sonuc9.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (cityN >= 9) {
            sonuc9.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 9) {
                sonuc10.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (cityN >= 10) {
            sonuc10.setText(iller[gidilenİlsırası[ss - 1] - 1] + "--->" + iller[gidilenİlsırası[ss] - 1] + "= " + mesafeler[ss++]);
            try {
                bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "--->" + iller[gidilenİlsırası[yazmasayacı] - 1] + "= " + mesafeler[yazmasayacı++] + "\n");
            } catch (IOException ex) {
                Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cityN == 10) {
                sonuc11.setText(iller[gidilenİlsırası[ss - 1] - 1] + "---> Kocaeli= " + mesafeler[ss]);
                try {
                    bWriter.write(iller[gidilenİlsırası[yazmasayacı - 1] - 1] + "---> Kocaeli= " + mesafeler[yazmasayacı] + "\n");
                    bWriter.write("Total yol: " + totalYol + "\n");
                    bWriter.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ekran.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        jLabel5.setText("Total Yol= " + totalYol);


    }//GEN-LAST:event_jButton2ActionPerformed

    private void sonuc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonuc1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sonuc1ActionPerformed
   

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed


    }//GEN-LAST:event_jTextField3ActionPerformed
    /*
        Bu bölümde kaç şehir gireceksiniz sorusunun cevabını alıp string abc değişkenine atar.
        abc Değişikeni integer bir değere döndürülüp cityN değişkenine atılır.
        Ekranda görülen kalan il sayısı girilen sayıya göre güncellenir.
    */
     String abc;// String tipinde kullanıcıdan kaç il girileceği bilgisini tuttuk.
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        abc = jTextField3.getText();
        cityN = Integer.parseInt(abc);
        if (cityN > 10 || cityN <= 0) {
            jLabel4.setText("1-10 Arasında şehir girebilirsiniz!!");
        } else {
            jLabel2.setText("Kalan il sayısı: " + cityN);
        }
        jTextField3.setText("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //Programı kapatır.
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField sonuc1;
    private javax.swing.JTextField sonuc10;
    private javax.swing.JTextField sonuc11;
    private javax.swing.JTextField sonuc2;
    private javax.swing.JTextField sonuc3;
    private javax.swing.JTextField sonuc4;
    private javax.swing.JTextField sonuc5;
    private javax.swing.JTextField sonuc6;
    private javax.swing.JTextField sonuc7;
    private javax.swing.JTextField sonuc8;
    private javax.swing.JTextField sonuc9;
    // End of variables declaration//GEN-END:variables
}
